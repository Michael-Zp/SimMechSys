%% File : myOpenLoop.tlc
%% Created : Thu Jan 24 14:02:47 2019
%%
%% Description: 
%%   Simulink Coder wrapper functions interface generated for 
%%   S-function "myOpenLoop.c".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Simulink Coder, see the Target Language Compiler manual
%%   (under Simulink Coder) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  myOpenLoop "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output
  %openfile externs

    #ifdef __cplusplus
    extern "C" {
    #endif

    extern void myOpenLoop_Start_wrapper(real_T *xC);

    extern void myOpenLoop_Outputs_wrapper(const real_T *u0,
			real_T *y0,
			const real_T *xC);
    extern void myOpenLoop_Derivatives_wrapper(const real_T *u0,
			real_T *y0,
			real_T *dx,
			real_T *xC);

    extern void myOpenLoop_Terminate_wrapper(real_T *xC);

    #ifdef __cplusplus
    }
    #endif
  %closefile externs
  %<LibCacheExtern(externs)>
  %%
%endfunction

%% InitializeConditions =========================================================
%%
%function InitializeConditions(block, system) Output
  /* %<Type> Block: %<Name> */

{
  real_T *xC = &%<LibBlockContinuousState("", "", 0)>;

  xC[0] = 0;
}

%endfunction

%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
  %%
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  {
    
    real_T *pxc = &%<LibBlockContinuousState("", "", 0)>;
    myOpenLoop_Outputs_wrapper(%<pu0>, %<py0>, pxc);
  }
  %%
%endfunction

%% Function: Derivatives ======================================================
%% Abstract:
%%      Derivatives
%%
%function Derivatives(block, system) Output
    /* S-Function "myOpenLoop_wrapper" Block: %<Name> */
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  {
    
    real_T *pxc = &%<LibBlockContinuousState("", "", 0)>;
    real_T *dx  = &%<LibBlockContinuousStateDerivative("", "", 0)>;
    myOpenLoop_Derivatives_wrapper(%<pu0>, %<py0>, dx, pxc);
  }
  %%
%endfunction

%% [EOF] myOpenLoop.tlc

