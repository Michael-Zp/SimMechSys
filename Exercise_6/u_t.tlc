%% File : u_t.tlc
%% Created : Thu Jan 24 14:59:11 2019
%%
%% Description: 
%%   Simulink Coder wrapper functions interface generated for 
%%   S-function "u_t.c".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Simulink Coder, see the Target Language Compiler manual
%%   (under Simulink Coder) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  u_t "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output
  %openfile externs

    #ifdef __cplusplus
    extern "C" {
    #endif

    extern void u_t_Start_wrapper(real_T *xC,
			const real_T *L, const int_T p_width0,
			const real_T *cm, const int_T p_width1,
			const real_T *J, const int_T p_width2,
			const real_T *R, const int_T p_width3,
			const real_T *D, const int_T p_width4);

    extern void u_t_Outputs_wrapper(const real_T *u0,
			real_T *speed,
			const real_T *xC,
			const real_T *L, const int_T p_width0,
			const real_T *cm, const int_T p_width1,
			const real_T *J, const int_T p_width2,
			const real_T *R, const int_T p_width3,
			const real_T *D, const int_T p_width4);
    extern void u_t_Derivatives_wrapper(const real_T *u0,
			real_T *speed,
			real_T *dx,
			real_T *xC,
			const real_T *L, const int_T p_width0,
			const real_T *cm, const int_T p_width1,
			const real_T *J, const int_T p_width2,
			const real_T *R, const int_T p_width3,
			const real_T *D, const int_T p_width4);

    extern void u_t_Terminate_wrapper(real_T *xC,
			const real_T *L, const int_T p_width0,
			const real_T *cm, const int_T p_width1,
			const real_T *J, const int_T p_width2,
			const real_T *R, const int_T p_width3,
			const real_T *D, const int_T p_width4);

    #ifdef __cplusplus
    }
    #endif
  %closefile externs
  %<LibCacheExtern(externs)>
  %%
%endfunction

%% InitializeConditions =========================================================
%%
%function InitializeConditions(block, system) Output
  /* %<Type> Block: %<Name> */

{
  real_T *xC = &%<LibBlockContinuousState("", "", 0)>;

  xC[0] = 0;
}

%endfunction

%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
  %%
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
    %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
  %else
    %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]
  %if (param_width2) > 1
    %assign pp2 = LibBlockMatrixParameterBaseAddr(P2)
  %else
    %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
  %endif
  %assign nelements3 = LibBlockParameterSize(P3)
  %assign param_width3 = nelements3[0] * nelements3[1]
  %if (param_width3) > 1
    %assign pp3 = LibBlockMatrixParameterBaseAddr(P3)
  %else
    %assign pp3 = LibBlockParameterAddr(P3, "", "", 0)
  %endif
  %assign nelements4 = LibBlockParameterSize(P4)
  %assign param_width4 = nelements4[0] * nelements4[1]
  %if (param_width4) > 1
    %assign pp4 = LibBlockMatrixParameterBaseAddr(P4)
  %else
    %assign pp4 = LibBlockParameterAddr(P4, "", "", 0)
  %endif
  %assign nelements5 = LibBlockParameterSize(P5)
  %assign param_width5 = nelements5[0] * nelements5[1]
  %if (param_width5) > 1
    %assign pp5 = LibBlockMatrixParameterBaseAddr(P5)
  %else
    %assign pp5 = LibBlockParameterAddr(P5, "", "", 0)
  %endif
  {
    
    real_T *pxc = &%<LibBlockContinuousState("", "", 0)>;
    u_t_Outputs_wrapper(%<pu0>, %<py0>, pxc, %<pp1>, %<param_width1>, %<pp2>, %<param_width2>, %<pp3>, %<param_width3>, %<pp4>, %<param_width4>, %<pp5>, %<param_width5>);
  }
  %%
%endfunction

%% Function: Derivatives ======================================================
%% Abstract:
%%      Derivatives
%%
%function Derivatives(block, system) Output
    /* S-Function "u_t_wrapper" Block: %<Name> */
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
    %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
  %else
    %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]
  %if (param_width2) > 1
    %assign pp2 = LibBlockMatrixParameterBaseAddr(P2)
  %else
    %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
  %endif
  %assign nelements3 = LibBlockParameterSize(P3)
  %assign param_width3 = nelements3[0] * nelements3[1]
  %if (param_width3) > 1
    %assign pp3 = LibBlockMatrixParameterBaseAddr(P3)
  %else
    %assign pp3 = LibBlockParameterAddr(P3, "", "", 0)
  %endif
  %assign nelements4 = LibBlockParameterSize(P4)
  %assign param_width4 = nelements4[0] * nelements4[1]
  %if (param_width4) > 1
    %assign pp4 = LibBlockMatrixParameterBaseAddr(P4)
  %else
    %assign pp4 = LibBlockParameterAddr(P4, "", "", 0)
  %endif
  %assign nelements5 = LibBlockParameterSize(P5)
  %assign param_width5 = nelements5[0] * nelements5[1]
  %if (param_width5) > 1
    %assign pp5 = LibBlockMatrixParameterBaseAddr(P5)
  %else
    %assign pp5 = LibBlockParameterAddr(P5, "", "", 0)
  %endif
  {
    
    real_T *pxc = &%<LibBlockContinuousState("", "", 0)>;
    real_T *dx  = &%<LibBlockContinuousStateDerivative("", "", 0)>;
    u_t_Derivatives_wrapper(%<pu0>, %<py0>, dx, pxc, %<pp1>, %<param_width1>, %<pp2>, %<param_width2>, %<pp3>, %<param_width3>, %<pp4>, %<param_width4>, %<pp5>, %<param_width5>);
  }
  %%
%endfunction

%% [EOF] u_t.tlc

